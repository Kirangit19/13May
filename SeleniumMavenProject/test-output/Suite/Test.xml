<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite hostname="LAPTOP-41741T4J" name="Test" tests="66" failures="0" timestamp="24 Sep 2022 03:48:52 GMT" time="2.217" errors="0">
  <testcase name="@BeforeTest getData" time="0.0" classname="excelReading.ActitimeExcelData">
    <failure type="java.lang.IllegalStateException" message="Cannot get a text value from a numeric cell">
      <![CDATA[java.lang.IllegalStateException: Cannot get a text value from a numeric cell
	at org.apache.poi.xssf.usermodel.XSSFCell.typeMismatch(XSSFCell.java:845)
	at org.apache.poi.xssf.usermodel.XSSFCell.getRichStringCellValue(XSSFCell.java:294)
	at org.apache.poi.xssf.usermodel.XSSFCell.getStringCellValue(XSSFCell.java:246)
	at com.Utilities.ExcelUtility.getCellValue(ExcelUtility.java:42)
	at excelReading.ActitimeExcelData2.getData(ActitimeExcelData2.java:25)
... Removed 22 stack frames]]>
    </failure>
  </testcase> <!-- @BeforeTest getData -->
  <testcase name="@BeforeTest beforetest" time="0.0" classname="excelReading.ActitimeExcelData">
    <skipped/>
  </testcase> <!-- @BeforeTest beforetest -->
  <testcase name="@BeforeClass StartTest" time="0.0" classname="report.TestReport">
    <skipped/>
  </testcase> <!-- @BeforeClass StartTest -->
  <testcase name="@AfterClass endTest" time="0.0" classname="report.TestReport">
    <skipped/>
  </testcase> <!-- @AfterClass endTest -->
  <testcase name="@BeforeClass beforeclass" time="0.0" classname="anotation.simpleTest">
    <skipped/>
  </testcase> <!-- @BeforeClass beforeclass -->
  <testcase name="@BeforeMethod beforemethod" time="0.0" classname="anotation.simpleTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforemethod -->
  <testcase name="@AfterMethod aftermethod" time="0.0" classname="anotation.simpleTest">
    <skipped/>
  </testcase> <!-- @AfterMethod aftermethod -->
  <testcase name="@BeforeMethod beforemethod" time="0.0" classname="anotation.simpleTest">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforemethod -->
  <testcase name="@AfterMethod aftermethod" time="0.0" classname="anotation.simpleTest">
    <skipped/>
  </testcase> <!-- @AfterMethod aftermethod -->
  <testcase name="@AfterClass afterclass" time="0.0" classname="anotation.simpleTest">
    <skipped/>
  </testcase> <!-- @AfterClass afterclass -->
  <testcase name="@AfterTest cleanup" time="0.0" classname="excelReading.ActitimeExcelData">
    <skipped/>
  </testcase> <!-- @AfterTest cleanup -->
  <testcase name="@AfterTest cleanup" time="0.0" classname="excelReading.ActitimeExcelData">
    <skipped/>
  </testcase> <!-- @AfterTest cleanup -->
  <testcase name="@AfterTest afterTest" time="0.0" classname="excelReading.ActitimeExcelData">
    <skipped/>
  </testcase> <!-- @AfterTest afterTest -->
  <testcase name="actitimeLogin" time="0.002" classname="excelReading.ActitimeExcelData">
    <skipped/>
  </testcase> <!-- actitimeLogin -->
  <testcase name="createTask" time="0.005" classname="actitimeTestNG.Actitime_enabled">
    <skipped/>
  </testcase> <!-- createTask -->
  <testcase name="openBrowserAndAppURL" time="0.002" classname="actitimeTestNG.Actitime_enabled">
    <skipped/>
  </testcase> <!-- openBrowserAndAppURL -->
  <testcase name="testContactsCreation" time="0.004" classname="pageObjectModel.TestContactPage">
    <skipped/>
  </testcase> <!-- testContactsCreation -->
  <testcase name="testDeletionCreation" time="0.002" classname="pageObjectModel.TestContactPage">
    <skipped/>
  </testcase> <!-- testDeletionCreation -->
  <testcase name="loginVtiger" time="0.002" classname="dataProvider.Test1">
    <skipped/>
  </testcase> <!-- loginVtiger -->
  <testcase name="loginVtiger" time="0.001" classname="dataProvider.Test1">
    <skipped/>
  </testcase> <!-- loginVtiger -->
  <testcase name="test1" time="0.003" classname="dataProvider.DataProvider1">
    <skipped/>
  </testcase> <!-- test1 -->
  <testcase name="test1" time="0.011" classname="dataProvider.DataProvider1">
    <skipped/>
  </testcase> <!-- test1 -->
  <testcase name="getCellData" time="0.001" classname="excelReading.ExcelReading">
    <skipped/>
  </testcase> <!-- getCellData -->
  <testcase name="getCellDetails" time="0.01" classname="excelReading.ExcelReading">
    <skipped/>
  </testcase> <!-- getCellDetails -->
  <testcase name="getRowDetails" time="0.001" classname="excelReading.ExcelReading">
    <skipped/>
  </testcase> <!-- getRowDetails -->
  <testcase name="readSheetDetails" time="0.001" classname="excelReading.ExcelReading">
    <skipped/>
  </testcase> <!-- readSheetDetails -->
  <testcase name="updateExcel" time="0.002" classname="excelReading.UpdateExcel">
    <skipped/>
  </testcase> <!-- updateExcel -->
  <testcase name="Test1" time="0.001" classname="retryAnalyzer.MyTest">
    <skipped/>
  </testcase> <!-- Test1 -->
  <testcase name="Test2" time="0.007" classname="retryAnalyzer.MyTest">
    <skipped/>
  </testcase> <!-- Test2 -->
  <testcase name="test1" time="0.005" classname="anotation.AnoalwaysRun">
    <skipped/>
  </testcase> <!-- test1 -->
  <testcase name="test2" time="0.001" classname="anotation.AnoalwaysRun">
    <skipped/>
  </testcase> <!-- test2 -->
  <testcase name="test4" time="0.003" classname="anotation.AnoalwaysRun">
    <skipped/>
  </testcase> <!-- test4 -->
  <testcase name="addDepartmentTestCase" time="0.0" classname="dataProvider.IncludeExclude">
    <skipped/>
  </testcase> <!-- addDepartmentTestCase -->
  <testcase name="addEmployeeTestCase" time="0.001" classname="dataProvider.IncludeExclude">
    <skipped/>
  </testcase> <!-- addEmployeeTestCase -->
  <testcase name="addLocationTestCase" time="0.003" classname="dataProvider.IncludeExclude">
    <skipped/>
  </testcase> <!-- addLocationTestCase -->
  <testcase name="testCase1" time="0.006" classname="sample.NewTest">
    <skipped/>
  </testcase> <!-- testCase1 -->
  <testcase name="dividedByZeroExample1" time="0.006" classname="actitimeTestNG.Actitime_ExceptionAndTimeout">
    <skipped/>
  </testcase> <!-- dividedByZeroExample1 -->
  <testcase name="executetimeOut" time="0.0" classname="actitimeTestNG.Actitime_ExceptionAndTimeout">
    <skipped/>
  </testcase> <!-- executetimeOut -->
  <testcase name="ReportTest1" time="0.001" classname="report.TestReport">
    <skipped/>
  </testcase> <!-- ReportTest1 -->
  <testcase name="openBrowserAndAppURL" time="0.005" classname="actitimeTestNG.Actitime_Timeout">
    <skipped/>
  </testcase> <!-- openBrowserAndAppURL -->
  <testcase name="createTask" time="0.001" classname="actitimeTestNG.Actitime_Dependson">
    <skipped/>
  </testcase> <!-- createTask -->
  <testcase name="logoutClose" time="0.0" classname="actitimeTestNG.Actitime_Dependson">
    <skipped/>
  </testcase> <!-- logoutClose -->
  <testcase name="openBrowserAndAppURL" time="0.002" classname="actitimeTestNG.Actitime_Dependson">
    <skipped/>
  </testcase> <!-- openBrowserAndAppURL -->
  <testcase name="test1" time="0.006" classname="anotation.AnoDependencies">
    <skipped/>
  </testcase> <!-- test1 -->
  <testcase name="test2" time="0.001" classname="anotation.AnoDependencies">
    <skipped/>
  </testcase> <!-- test2 -->
  <testcase name="Addition" time="0.0" classname="dataProvider.GroupExample">
    <skipped/>
  </testcase> <!-- Addition -->
  <testcase name="Division" time="0.0" classname="dataProvider.GroupExample">
    <skipped/>
  </testcase> <!-- Division -->
  <testcase name="Modulus" time="0.009" classname="dataProvider.GroupExample">
    <skipped/>
  </testcase> <!-- Modulus -->
  <testcase name="Multiplication" time="0.003" classname="dataProvider.GroupExample">
    <skipped/>
  </testcase> <!-- Multiplication -->
  <testcase name="Percentage" time="0.001" classname="dataProvider.GroupExample">
    <skipped/>
  </testcase> <!-- Percentage -->
  <testcase name="Substraction" time="0.0" classname="dataProvider.GroupExample">
    <skipped/>
  </testcase> <!-- Substraction -->
  <testcase name="Test1" time="0.027" classname="retryAnalyzer.RuntimeRetry">
    <skipped/>
  </testcase> <!-- Test1 -->
  <testcase name="Test2" time="0.003" classname="retryAnalyzer.RuntimeRetry">
    <skipped/>
  </testcase> <!-- Test2 -->
  <testcase name="test1" time="0.001" classname="anotation.simpleTest">
    <skipped/>
  </testcase> <!-- test1 -->
  <testcase name="test2" time="0.003" classname="anotation.simpleTest">
    <skipped/>
  </testcase> <!-- test2 -->
  <testcase name="actitimeLogin" time="0.001" classname="excelReading.ActitimeExcelData2">
    <skipped/>
  </testcase> <!-- actitimeLogin -->
  <testcase name="makemytrip" time="0.001" classname="dropDown.DynamicDropDown">
    <skipped/>
  </testcase> <!-- makemytrip -->
  <testcase name="start" time="0.002" classname="dropDown.DynamicDropDown">
    <skipped/>
  </testcase> <!-- start -->
  <testcase name="test" time="0.0" classname="sample.Sample1">
    <skipped/>
  </testcase> <!-- test -->
  <testcase name="compose" time="0.001" classname="sample.Sample2">
    <skipped/>
  </testcase> <!-- compose -->
  <testcase name="login" time="0.002" classname="sample.Sample2">
    <skipped/>
  </testcase> <!-- login -->
  <testcase name="signUp" time="0.0" classname="sample.Sample2">
    <skipped/>
  </testcase> <!-- signUp -->
  <testcase name="openBrowserAndAppURL" time="0.001" classname="actitimeTestNG.Actitime_InvocationCount">
    <skipped/>
  </testcase> <!-- openBrowserAndAppURL -->
  <testcase name="openBrowserAndAppURL" time="0.006" classname="actitimeTestNG.Actitime_InvocationCount">
    <skipped/>
  </testcase> <!-- openBrowserAndAppURL -->
  <testcase name="openBrowserAndAppURL" time="0.001" classname="actitimeTestNG.Actitime_InvocationCount">
    <skipped/>
  </testcase> <!-- openBrowserAndAppURL -->
  <testcase name="openBrowserAndAppURL" time="0.001" classname="actitimeTestNG.Actitime_InvocationCount">
    <skipped/>
  </testcase> <!-- openBrowserAndAppURL -->
  <testcase name="openBrowserAndAppURL" time="0.001" classname="actitimeTestNG.Actitime_InvocationCount">
    <skipped/>
  </testcase> <!-- openBrowserAndAppURL -->
  <testcase name="a_signUp" time="0.001" classname="sample.Sample3">
    <skipped/>
  </testcase> <!-- a_signUp -->
  <testcase name="b_login" time="0.002" classname="sample.Sample3">
    <skipped/>
  </testcase> <!-- b_login -->
  <testcase name="c_compose" time="0.0" classname="sample.Sample3">
    <skipped/>
  </testcase> <!-- c_compose -->
  <testcase name="test1" time="0.002" classname="anotation.AnoPriority">
    <skipped/>
  </testcase> <!-- test1 -->
  <testcase name="test3" time="0.0" classname="anotation.AnoPriority">
    <skipped/>
  </testcase> <!-- test3 -->
  <testcase name="openBrowserAndAppURL" time="0.001" classname="actitimeTestNG.Actitime_Priority">
    <skipped/>
  </testcase> <!-- openBrowserAndAppURL -->
  <testcase name="login" time="0.0" classname="actitimeTestNG.Actitime_Priority">
    <skipped/>
  </testcase> <!-- login -->
  <testcase name="createTask" time="0.005" classname="actitimeTestNG.Actitime_Priority">
    <skipped/>
  </testcase> <!-- createTask -->
  <testcase name="logoutClose" time="0.0" classname="actitimeTestNG.Actitime_Priority">
    <skipped/>
  </testcase> <!-- logoutClose -->
  <testcase name="test3" time="0.0" classname="anotation.AnoalwaysRun">
    <skipped/>
  </testcase> <!-- test3 -->
  <testcase name="login" time="0.0" classname="actitimeTestNG.Actitime_Dependson">
    <skipped/>
  </testcase> <!-- login -->
  <testcase name="test3" time="0.0" classname="anotation.AnoDependencies">
    <skipped/>
  </testcase> <!-- test3 -->
</testsuite> <!-- Test -->
